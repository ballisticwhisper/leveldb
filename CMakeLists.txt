CMAKE_MINIMUM_REQUIRED( VERSION 3.0 )
PROJECT( leveldb )
CMAKE_POLICY(SET CMP0012 NEW)

IF(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY )
	SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib" )
ENDIF(  )
IF(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY )
	SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib" )
ENDIF(  )

SET( LEVELDB_INC_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/include" )
SET( LEVELDB_DB_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/db" )
SET( LEVELDB_MEMENV_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/helpers/memenv" )
SET( LEVELDB_PORT_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/port" )
SET( LEVELDB_TABLE_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/table" )
SET( LEVELDB_UTIL_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/util" )
SET( BOOST_INC_DIR "${CMAKE_SOURCE_DIR}/dependencies/boost" )
SET( SNAPPY_INC_DIR "${CMAKE_SOURCE_DIR}/dependencies/snappy" )
SET( UNISTD_INC_DIR "${CMAKE_SOURCE_DIR}/dependencies/leveldb/port/win" )

INCLUDE_DIRECTORIES( ${BOOST_INC_DIR} ${LEVELDB_INC_DIR} ${LEVELDB_MEMENV_DIR} "${CMAKE_SOURCE_DIR}/dependencies/leveldb" ${SNAPPY_INC_DIR} ${UNISTD_INC_DIR} )

FILE( GLOB LEVELDB_INC_ROOT_FILES "${LEVELDB_INC_DIR}/leveldb/*.h" )
FILE( GLOB LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/*.cc" "${LEVELDB_DB_DIR}/*.h" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/autocompact_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/corruption_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/db_bench.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/db_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/dbformat_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/filename_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/log_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/skiplist_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/version_edit_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/version_set_test.cc" )
LIST( REMOVE_ITEM LEVELDB_DB_FILES "${LEVELDB_DB_DIR}/write_batch_test.cc" )

FILE( GLOB LEVELDB_MEMENV_FILES "${LEVELDB_MEMENV_DIR}/*.cc" "${LEVELDB_MEMENV_DIR}/*.h" )
LIST( REMOVE_ITEM LEVELDB_MEMENV_FILES "${LEVELDB_MEMENV_DIR}/memenv_test.cc" )

FILE( GLOB LEVELDB_PORT_FILES "${LEVELDB_PORT_DIR}/*.cc" "${LEVELDB_PORT_DIR}/*.h" )
LIST( REMOVE_ITEM LEVELDB_PORT_FILES "${LEVELDB_PORT_DIR}/port_android.cc" )
LIST( REMOVE_ITEM LEVELDB_PORT_FILES "${LEVELDB_PORT_DIR}/port_android.h" )
LIST( REMOVE_ITEM LEVELDB_PORT_FILES "${LEVELDB_PORT_DIR}/port_posix.cc" )
LIST( REMOVE_ITEM LEVELDB_PORT_FILES "${LEVELDB_PORT_DIR}/port_posix.h" )
LIST( REMOVE_ITEM LEVELDB_PORT_FILES "${LEVELDB_PORT_DIR}/port_example.h" )

FILE( GLOB LEVELDB_PORT_WIN_FILES "${LEVELDB_PORT_DIR}/win/*.h" )
FILE( GLOB LEVELDB_TABLE_FILES "${LEVELDB_TABLE_DIR}/*.cc" "${LEVELDB_TABLE_DIR}/*.h" )
LIST( REMOVE_ITEM LEVELDB_TABLE_FILES "${LEVELDB_TABLE_DIR}/table_test.cc" )

FILE( GLOB LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/*.cc" "${LEVELDB_UTIL_DIR}/*.h" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/arena_test.cc" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/bloom_test.cc" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/cache_test.cc" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/coding_test.cc" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/crc32c_test.cc" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/env_test.cc" )
LIST( REMOVE_ITEM LEVELDB_UTIL_FILES "${LEVELDB_UTIL_DIR}/env_posix.cc" )

IF( WIN32 )
	ADD_DEFINITIONS( -DLEVELDB_PLATFORM_WINDOWS -DOS_WIN -DNOMINMAX -DARCH_CPU_X86_FAMILY -DSNAPPY -D_CRT_SECURE_NO_WARNINGS )
ENDIF(  )

SOURCE_GROUP( include\\leveldb FILES ${LEVELDB_INC_ROOT_FILES} )
SOURCE_GROUP( src\\db FILES ${LEVELDB_DB_FILES} )
SOURCE_GROUP( src\\helpers\\memenv FILES ${LEVELDB_MEMENV_FILES} )
SOURCE_GROUP( src\\port FILES ${LEVELDB_PORT_FILES} )
#SOURCE_GROUP( src\\port\\win FILES ${LEVELDB_PORT_WIN_FILES} )
SOURCE_GROUP( src\\table FILES ${LEVELDB_TABLE_FILES} )
SOURCE_GROUP( src\\util FILES ${LEVELDB_UTIL_FILES} )

SET( LEVELDB_SRC_FILES ${LEVELDB_DB_FILES} ${LEVELDB_PORT_FILES} ${LEVELDB_PORT_WIN_FILES} ${LEVELDB_TABLE_FILES} ${LEVELDB_UTIL_FILES} ${LEVELDB_MEMENV_FILES} )
 
ADD_LIBRARY( leveldb STATIC ${LEVELDB_SRC_FILES} ${LEVELDB_INC_ROOT_FILES} )

if ( MSVC )
    set_target_properties( leveldb PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/../../../libs )
    set_target_properties( leveldb PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_BINARY_DIR}/../../../libs )
    set_target_properties( leveldb PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BINARY_DIR}/../../../libs )
endif ( MSVC )

